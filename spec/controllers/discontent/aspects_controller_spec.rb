require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Discontent::AspectsController do

  # This should return the minimal set of attributes required to create a valid
  # Discontent::Aspect. As you add validations to Discontent::Aspect, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:content => "foo"}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Discontent::AspectsController. Be sure to keep this updated too.
  def valid_session
    {}
  end
  let(:project) { FactoryGirl.create(:project) }
  let(:aspect) {FactoryGirl.create(:aspect, project: project)}
  let(:user) { FactoryGirl.create(:user) }
  let(:admin) { FactoryGirl.create(:admin) }
  before { sign_in user }
  describe "GET index" do
    it "assigns all discontent_aspects as @discontent_aspects" do
      get :index, {:project => project}, valid_session
      assigns(:posts).should eq([aspect])
    end
  end

  describe "GET show" do
    it "assigns the requested discontent_aspect as @discontent_aspect" do
      get :show, {:id => aspect.to_param, :project => project}, valid_session
      assigns(:post).should eq(aspect)
    end
  end

  describe "GET new" do
    it "assigns a new discontent_aspect as @discontent_aspect" do
      sign_in user
      get :new, {:project => project}, valid_session

      assigns(:post).should be_a_new(Discontent::Aspect)
    end
  end

  describe "GET edit" do
    it "assigns the requested discontent_aspect as @discontent_aspect" do
      get :edit, {:id => aspect.to_param, :project => project}, valid_session
      assigns(:post).should eq(aspect)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Discontent::Aspect" do
        expect {
          post :create, {:discontent_aspect => valid_attributes, :project => project}, valid_session
        }.to change(Discontent::Aspect, :count).by(1)
      end

      it "assigns a newly created discontent_aspect as @discontent_aspect" do
        post :create, {:discontent_aspect => valid_attributes, :project => project}, valid_session
        assigns(:post).should be_a(Discontent::Aspect)
        assigns(:post).should be_persisted
      end

      
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved discontent_aspect as @discontent_aspect" do
        # Trigger the behavior that occurs when invalid params are submitted
        Discontent::Aspect.any_instance.stub(:save).and_return(false)
        post :create, {:discontent_aspect => {}, :project => project}, valid_session
        assigns(:post).should be_a_new(Discontent::Aspect)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Discontent::Aspect.any_instance.stub(:save).and_return(false)
        post :create, {:discontent_aspect => {}, :project => project}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested discontent_aspect" do
        # Assuming there are no other discontent_aspects in the database, this
        # specifies that the Discontent::Aspect created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Discontent::Aspect.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => aspect.to_param, :project => project, :discontent_aspect => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested discontent_aspect as @discontent_aspect" do
        put :update, {:id => aspect.to_param,:project => project, :discontent_aspect => valid_attributes}, valid_session
        assigns(:post).should eq(aspect)
      end

      it "redirects to the discontent_aspect" do
        put :update, {:id => aspect.to_param, :project => project, :discontent_aspect => valid_attributes}, valid_session
        response.should redirect_to  :action=>'show', :project => project, :id => aspect.id
      end
    end

    describe "with invalid params" do
      it "assigns the discontent_aspect as @discontent_aspect" do
        # Trigger the behavior that occurs when invalid params are submitted
        Discontent::Aspect.any_instance.stub(:save).and_return(false)
        put :update, {:id => aspect.to_param, :project => project, :discontent_aspect => {}}, valid_session
        assigns(:post).should eq(aspect)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Discontent::Aspect.any_instance.stub(:save).and_return(false)
        put :update, {:id => aspect.to_param, :project => project, :discontent_aspect => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  # describe "DELETE destroy" do
  #   it "destroys the requested discontent_aspect" do
  #     sign_in user

  #     expect {
  #       delete :destroy, {:id => aspect.id, :project => project}, valid_session
  #     }.to change(Discontent::Aspect, :count).by(1)
  #   end

   
  # end

end
