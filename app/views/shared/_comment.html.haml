.media.comment{ id: "comment#{comment.id}", class: "#{'new_comment' if @last_time_visit && (comment.created_at > @last_time_visit)}" }
  .media-left
    -#= image_tag 'no-ava.png', class: 'media-object img35 img-circle'
    -#= cl_image_tag comment.user.try(:avatar), class: 'media-object img35 img-circle'
    = link_to user_path(@project, comment.user) do
      = user_image_tag comment.user.try(:avatar), class: 'media-object img35 img-circle'
  .media-body
    = link_to user_path(@project, comment.user), id: "user_name_#{comment.id}" do
      %h5.media-heading.bold.theme_font_color
        = comment.user
    %span.comment_interf
      %span.date_time.theme_font_color
        = distance_of_time_in_words(comment.created_at, Time.now)
        назад
      -#= l(comment.created_at, format: '%k:%M')
      - if current_user?(comment.user) || boss?
        %span.dropdown.edit_comment{ id: "redactor_comment_#{comment.id}" }
          %button.btn_reset{ id: "edit_comment#{comment.id}", 'aria-expanded' => 'false', 'aria-haspopup' => 'true', 'data-toggle' => 'dropdown', type: 'button' }
            %i.fa.fa-cog.fa-lg.theme_font_color
          %ul.dropdown-menu{ 'aria-labelledby' => "edit_comment#{comment.id}", role: 'menu' }
            %li
              %a.edit-comment{ data: { project: @project.id, id: comment.id, path: comment.post.class.name.underscore.pluralize },
              id: "edit_comment_#{comment.id}", href: '#', tabindex: '-1' }
                %i.glyphicon.glyphicon-pencil>
                Редактировать
            %li
              = link_to({ controller: comment.post_controller_path, action: :destroy_comment, id: comment.id }, method: :put, remote: true,
              data: { confirm: t('confirm.delete_comment') }, id: "destroy_comment_#{comment.id}", tabindex: '-1') do
                %i.glyphicon.glyphicon-remove>
                Удалить

        - if boss?
          = link_to({ controller: comment.post_controller_path, action: :change_status_for_comment, id: comment.post.id, comment_id: comment.id,
          approve_status: true }, remote: true, method: :put, class: 'link_status', id: "approve_status_comment_#{comment.id}") do
            %span.badge.badge_important{ class: "#{'theme_back_color' if comment.approve_status}" }= t('show.important')
        - elsif comment.approve_status
          %span.theme_font_color
            %i.fa.fa-bookmark.fa-lg
      %span{ id: "cancel_comment_#{comment.id}" }
        %a.edit-cancel{ href: '#', style: 'display:none;', 'data-id' =>  comment.id }
          %span.label.label-danger Отменить
  -#.divider10
  -#%label.label.label-success Согласен
  -#label.label.label-danger Не согласен
  -#%span.font12 Пояснение:
  %p.font_grey.comment_text{ id: "comment_text_#{comment.id}" }
    = comment.content
  .post-interfaces-buttons.text-left
    - if boss?
      = link_to({ controller: comment.post.class.name.underscore.pluralize, action: :add_score_for_comment, project: @project.id, id: comment.id },
      remote: true, method: :put,  id: "add_score_for_comment_#{comment.id}") do
        %i.fa.fa-trophy{ class: "#{comment.useful ? 'font_red' : 'font_grey'}" }
    %span.bold
      %span{ id: "lk_comment_#{comment.id}" }
        = comment.users_pro.count
      = link_to({ controller: comment.post_controller_path, action: :like_comment, project: @project, id: comment.id, against: false },
      remote: true, method: :put,
           id: "like_comment_#{comment.id}", 'data-placement' => 'bottom', 'data-toggle' => 'tooltip', title: 'Нравится') do
        %i.fa.fa-thumbs-up.theme_font_color

    %span.bold
      %span{ id: "dlk_comment_#{comment.id}" }
        = comment.users_against.count
      = link_to({ controller: comment.post_controller_path, action: :like_comment, project: @project,  id: comment.id, against: true },
      remote: true, method: :put,
       id: "dislike_comment_#{comment.id}", 'data-placement' => 'bottom', 'data-toggle' => 'tooltip', title: 'Не нравится') do
        %i.fa.fa-thumbs-down.theme_font_color

    -#%button.rate_button{ 'data-for' => "comment#{comment.id}", 'data-rate-action' => 'like', type: 'button' }
    -#  %span.bold
    -#    %span(id="lk_comment_#{comment.id}")
    -#      = comment.users_pro.count
    -#    = link_to({ controller: comment.controller_name_for_action, action: :like_comment, project: @project, id: comment.id, against: false },
    -#      remote: true, method: :put,
    -#     id: "like_comment_#{comment.id}", 'data-placement' => 'bottom', 'data-toggle' => 'tooltip', title:'Нравится') do
    -#      %i.fa.fa-thumbs-up.theme_font_color
    -#%button.rate_button{ 'data-for' => "comment#{comment.id}", 'data-rate-action' => 'dislike', type: 'button' }
    -#  %span.bold
    -#    %span(id="dlk_comment_#{comment.id}")
    -#      = comment.users_against.count
    -#    = link_to({ controller: comment.controller_name_for_action, action: :like_comment, project: @project,  id: comment.id, against: true },
    -#      remote: true, method: :put,
    -#     id: "dislike_comment_#{comment.id}", 'data-placement' => 'bottom', 'data-toggle' => 'tooltip', title:'Не нравится') do
    -#      %i.fa.fa-thumbs-down.theme_font_color

    %button.reply-comment.reply_btn.collapsed{ data: { project: @project.id, id: comment.post.id, path: comment.post.class.name.underscore.pluralize,
    comment: comment.id }, id: "reply_comment_#{comment.id}",
     'data-target' => "#reply_form_#{comment.id}", 'data-toggle' => 'collapse', type: 'button' }
      %span.bold{ 'data-placement' => 'bottom', 'data-toggle' => 'tooltip', title: 'Перейти в обсуждение' }
        %i.fa.fa-reply.theme_font_color
%a.answers_collapse.opened{ id: "answers_collapse_#{comment.id}", class: "#{comment.comments.present? ? 'theme_font_color' : 'font_grey'}",
'aria-expanded' => 'false', 'data-toggle' => 'collapse', href: "#answers_#{comment.id}" }
  %span
    - if comment.comments.size > 0
      = t('stages.comments', count: comment.comments.size)
.com_answers.collapse.in{ id: "answers_#{comment.id}" }
  .answers_subblock.level1
    - comment.comments.each do |c|
      = render partial: 'shared/comment', object: c
