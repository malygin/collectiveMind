<!doctype html>
%html
  %head
    %meta{:charset => "utf-8"}/
    %title CodeMirror: JavaScript mode
    %link{:href => "../../lib/codemirror.css", :rel => "stylesheet"}/
    %script{:src => "../../lib/codemirror.js"}
    %script{:src => "../../addon/edit/matchbrackets.js"}
    %script{:src => "../../addon/edit/continuecomment.js"}
    %script{:src => "javascript.js"}
    %link{:href => "../../doc/docs.css", :rel => "stylesheet"}/
    :css
      .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}  %body
    %h1 CodeMirror: JavaScript mode
    %div
      %textarea#code{:name => "code"}
        :preserve
          
          // Demo code (the actual new parser character stream implementation)
          
          function StringStream(string) {
            this.pos = 0;
            this.string = string;
          }
          
          StringStream.prototype = {
            done: function() {return this.pos >= this.string.length;},
            peek: function() {return this.string.charAt(this.pos);},
            next: function() {
              if (this.pos &lt; this.string.length)
                return this.string.charAt(this.pos++);
            },
            eat: function(match) {
              var ch = this.string.charAt(this.pos);
              if (typeof match == "string") var ok = ch == match;
              else var ok = ch &amp;&amp; match.test ? match.test(ch) : match(ch);
              if (ok) {this.pos++; return ch;}
            },
            eatWhile: function(match) {
              var start = this.pos;
              while (this.eat(match));
              if (this.pos > start) return this.string.slice(start, this.pos);
            },
            backUp: function(n) {this.pos -= n;},
            column: function() {return this.pos;},
            eatSpace: function() {
              var start = this.pos;
              while (/\s/.test(this.string.charAt(this.pos))) this.pos++;
              return this.pos - start;
            },
            match: function(pattern, consume, caseInsensitive) {
              if (typeof pattern == "string") {
                function cased(str) {return caseInsensitive ? str.toLowerCase() : str;}
                if (cased(this.string).indexOf(cased(pattern), this.pos) == this.pos) {
                  if (consume !== false) this.pos += str.length;
                  return true;
                }
              }
              else {
                var match = this.string.slice(this.pos).match(pattern);
                if (match &amp;&amp; consume !== false) this.pos += match[0].length;
                return match;
              }
            }
          };
    :javascript
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
        lineNumbers: true,
        matchBrackets: true,
        extraKeys: {"Enter": "newlineAndIndentContinueComment"}
      });
        %p
      JavaScript mode supports a two configuration
      options:
    %ul
      %li
        %code json
        which will set the mode to expect JSON data rather than a JavaScript program.
      %li
        %code typescript
        which will activate additional syntax highlighting and some other things for TypeScript code (
        %a{:href => "typescript.html"}> demo
        ).
    %p
      %strong MIME types defined:
      = succeed "," do
        %code text/javascript
      = succeed "," do
        %code application/json
      = succeed "," do
        %code text/typescript
      = succeed "." do
        %code application/typescript
