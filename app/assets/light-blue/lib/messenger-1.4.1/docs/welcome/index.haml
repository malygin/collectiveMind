!!!
%html
  %head
    %meta{:charset => "utf-8"}/
    %meta{:content => "chrome=1", "http-equiv" => "X-UA-Compatible"}/
    %meta{:content => "Messenger : Alerts for the 21st century", :name => "description"}/
    %link{:href => "stylesheets/stylesheet.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "stylesheets/location-sel.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "stylesheets/theme-sel.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "stylesheets/demo.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger-theme-block.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger-theme-future.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger-theme-air.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger-theme-ice.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "../../build/css/messenger-theme-flat.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "lib/executr/build/css/executr.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "lib/executr/lib/CodeMirror/codemirror.css", :media => "screen", :rel => "stylesheet", :type => "text/css"}/
    %script{:src => "http://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.min.js", :type => "text/javascript"}
    %script{:src => "http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.3/underscore-min.js", :type => "text/javascript"}
    %script{:src => "http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.10/backbone-min.js", :type => "text/javascript"}
    %script{:src => "http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.2.2/bootstrap.min.js", :type => "text/javascript"}
    %script{:src => "../../build/js/messenger.js", :type => "text/javascript"}
    %script{:src => "../../build/js/messenger-theme-future.js", :type => "text/javascript"}
    %script{:src => "../../build/js/messenger-theme-flat.js", :type => "text/javascript"}
    %script{:src => "javascripts/location-sel.js", :type => "text/javascript"}
    %script{:src => "javascripts/theme-sel.js", :type => "text/javascript"}
    %script{:src => "javascripts/demo.js", :type => "text/javascript"}
    %script{:src => "lib/executr/lib/CodeMirror/codemirror.js", :type => "text/javascript"}
    %script{:src => "lib/executr/lib/CodeMirror/mode/coffeescript/coffeescript.js", :type => "text/javascript"}
    %script{:src => "lib/executr/lib/CodeMirror/mode/javascript/javascript.js", :type => "text/javascript"}
    %script{:src => "lib/executr/build/js/executr.js", :type => "text/javascript"}
    %script{:src => "lib/executr/lib/coffee-script.js", :type => "text/javascript"}
    :javascript
      $(function(){
          $('body').executr();
      });
        %title Messenger - Alerts for the 21st Century
  %body
    / HEADER
    #header_wrap.outer
      %header.inner
        %a#forkme_banner{:href => "https://github.com/HubSpot/messenger"} View on GitHub
        .social
          %iframe{:allowtransparency => "true", :frameborder => "0", :height => "20", :scrolling => "0", :src => "http://ghbtns.com/github-btn.html?user=HubSpot&repo=messenger&type=watch", :width => "62"}
          %a.twitter-share-button{"data-count" => "none", "data-url" => "http://github.hubspot.com/messenger/", "data-via" => "HubSpotDev", :href => "https://twitter.com/share"} Tweet
          :javascript
            !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="http://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");        %h1#project_title Messenger
        %h2#project_tagline Alerts for the 21st century
        %section#downloads
          %a.zip_download_link{:href => "https://github.com/HubSpot/messenger/zipball/master"} Download this project as a .zip file
          %a.tar_download_link{:href => "https://github.com/HubSpot/messenger/tarball/master"} Download this project as a tar.gz file
    / MAIN CONTENT
    #main_content_wrap.outer
      %section#main_content.inner
        %h1 HubSpot Messaging Library
        %ul
          %li
            Show transactional messages in your app.
          %li
            Wrap AJAX requests with progress, success and error messages.
          %li
            Add action links to your messages.
          %li
            4kb minified and compressed.
          %li
            Works in everything modern, and IE7 and above.
        %h2 Demo
        :css
          .iframe-demo {
            height: 240px;
            width: 100%;
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
            border: 5px solid #f5f5f5;
            border-top-width: 40px;
            -webkit-box-shadow: 0 0 0 1px #ccc, 0 0 10px rgba(0, 0, 0 ,.1);
            -moz-box-shadow: 0 0 0 1px #ccc, 0 0 10px rgba(0, 0, 0 ,.1);
            box-shadow: 0 0 0 1px #ccc, 0 0 10px rgba(0, 0, 0 ,.1);
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;
          }
        %iframe.iframe-demo{:src => "iframe-demo.html"}
        %h2 Requires
        %ul
          %li jQuery
          %li Plays well with, but doesn't require, Bootstrap
        %h2 Including
        %h3 JS
        %pre
          %code
            :preserve
              /build/js/messenger.min.js
              /build/js/messenger-theme-future.js
        %h3 CSS
        %pre
          %code
            :preserve
              /build/css/messenger.css
              /build/css/messenger-theme-future.css
        %p
          Also available as a
          %a{:href => "https://github.com/benjis/messengerjs-rails"} Rails gem
          and on
          = succeed "." do
            %a{:href => "http://cdnjs.com/"} cdnjs
        %h2 Really Quick Usage
        %pre
          %code{:executable => ""}
            :preserve
              
              # Replace:
              $.ajax
                  url: "/some-url"
                  success: ->
              
              # With:
              Messenger().run
                  errorMessage: "This did not go well."
              ,
                  url: "/some-url"
                  success: ->
        %h2
          Usage
          %span.subtitle Click Code to Edit
        .controls
          %div
            %h4 Change Location
            .location-selector
          %div
            %h4 Change Theme
            %ul.theme-selector
          %div
            %h4 Change Language
            %ul.selector
              %li.executr-switch{"data-code-type" => "javascript"} JavaScript
              %li.executr-switch{"data-code-type" => "coffeescript"} CoffeeScript
          %hr.clear/
          %pre
            %code
              %output
        %pre
          %code{:executable => ""}
            :preserve
              
              Messenger().post "Your request has succeded!"
          %code{:executable => ""}
            :preserve
              
              Messenger().post
                  message: 'There was an explosion while processing your request.'
                  type: 'error'
                  showCloseButton: true
          %code{:executable => ""}
            :preserve
              
              msg = Messenger().post "My Message"
              msg.update "I changed my mind, this is my message"
              msg.hide()
          %code{:executable => ""}
            :preserve
              
              # Want to put actions at the end of your messages?
              msg = Messenger().post
                  message: 'Launching thermonuclear war...'
                  type: 'info'
                  actions:
                      cancel:
                          label: 'cancel launch'
                          action: ->
                              msg.update
                                  message: 'Thermonuclear war averted'
                                  type: 'success'
                                  actions: false
          %code{:executable => ""}
            :preserve
              
              # This guy will 500 a few times, then succeed
              i = 0
              Messenger().run
                errorMessage: 'Error destroying alien planet'
                successMessage: 'Alien planet destroyed!'
              
                action: (opts) ->
                  if (++i < 3)
                    opts.error({status: 500, readyState: 0, responseText: 0})
                  else
                    opts.success()
              
          %code{:executable => ""}
            :preserve
              
              # Have an error? How about auto retrys with a Gmail-style countdown
              # (hidden in the future theme)?:
              msg = Messenger().post
                  message: "I'm sorry Hal, I just can't do that."
                  actions:
                      retry:
                          label: 'retry now'
                          phrase: 'Retrying TIME'
                          auto: true
                          delay: 10
                          action: ->
                              # Do some retrying...
              
                      cancel:
                          action: ->
                              do msg.cancel
          %code{:executable => ""}
            :preserve
              
              # You can bind to action events as well:
              msg.on 'action:retry', ->
                  alert('Hey, you retried!')
          %code{:executable => ""}
            :preserve
              
              # Need more control? You can bind events backbone-style based
              # on the type of message.
              msg.update
                  events:
                      'success click': ->
                          # Will fire when the user clicks the message
                          # in a success state.
              
                      'error click a.awesome-class': ->
                          # Rock on
          %code{:executable => ""}
            :preserve
              
              # Need your message to hide after a while, or when the Backbone
              # router changes the page?
              Messenger().post
                  message: "Weeeeee"
              
                  hideAfter: 10
                  hideOnNavigate: true
          %code{:executable => ""}
            :preserve
              
              # You can use the id property to ensure that only one
              # instance of a message will appear on the page at a time
              # (the older message will be hidden).
              Messenger().post
                message: "Only one at a time!"
                id: "Only-one-message"
          %code{:executable => ""}
            :preserve
              
              # When you add the singleton attribute, it ensures that no
              # other messages with that id will ever be shown again
              # (the newer message will be hidden).
              Messenger().post
                message: "It's just me!"
                id: '4'
                singleton: true
              
              Messenger().post
                message: "You'll never see me"
                id: '4'
                singleton: true
          %code{:executable => ""}
            :preserve
              
              # Rather than hiding and showing multiple messages
              # you can also maintain a single message between
              # requests.
              msg = Messenger().run()
              Messenger().run({messageInstance: msg})
          %code{:executable => ""}
            :preserve
              
              # Don't want your message hidden on a long page? (Not necessary
              # if you're using the default fixed positioning)
              msg = Messenger().post
                  message: "You'll see me!"
              
                  scrollTo: true
                  # Requires jQuery scrollTo plugin
          %code{:executable => ""}
            :preserve
              
              msg.scrollTo() # also works
          %code{:executable => ""}
            :preserve
              
              # Lazy/smart? How about messenger does it all for you?  All the
              # retry magic comes with.
              Messenger().run
                  successMessage: 'Data saved.'
                  errorMessage: 'Error saving data'
                  progressMessage: 'Saving data' # Don't include messages you
                                                 # don't want to appear.
              
                  # Any standard message opts can go here
              ,
                  # All the standard jQuery ajax options here
              
                  url: '/data'
          %code{:executable => ""}
            :preserve
              
              # Need to override the messages based on the response?
              Messenger().run
                  errorMessage: 'Oops'
              ,
                  url: '/data'
                  error: (xhr) ->
                      # Whatever you return from your handlers will replace
                      # the default messages
              
                      if xhr?.status is 404
                          return "Data not found"
              
                      # Return true or undefined for your predefined message
                      # Return false to not show any message
              
                      return true
          %code{:executable => ""}
            :preserve
              
              # Sometimes you only want to show the success message when a
              # retry succeeds, not if a retry wasen't required:
              Messenger().run
                  successMessage: 'Successfully saved.'
                  errorMessage: 'Error saving'
              
                  showSuccessWithoutError: false
              ,
                  url: '/data'
          %code{:executable => ""}
            :preserve
              
              # You don't have to use $.ajax as your action, messenger works
              # great for any async process:
              Messenger().run
                  successMessage: 'Bomb defused successfully'
              
                  action: defuseBomb
                  # You can put options for defuseBomb here
                  # It will be passed success and error callbacks
          %code{:executable => ""}
            :preserve
              
              # Need to hide all messages?
              Messenger().hideAll()
          %code{:executable => ""}
            :preserve
              
              # If your action responds with a promise-like thing, its
              # methods will be copied onto the message:
              
              Messenger().run({}, {url: 'a'}).fail(-> alert "Uh oh")
          %code{:executable => ""}
            :preserve
              
              # Do you use Backbone? Hook all backbone calls:
              Messenger().hookBackboneAjax()
              
              # By default, there will be no error message (just background
              # retries), return an error message from your backbone error handler,
              # or add an errorMessage to the messenger opts to set one.
              # You can override these options by passing them into
              # hookBackboneAjax, or adding a {'messenger': } hash to your
              # fetch call.
          %code{:executable => ""}
            :preserve
              
              # You don't have to use the global messenger
              $('div#message-container').messenger().post "My message"
          %code{:executable => ""}
            :preserve
              
              # By default, the global messenger will create an ActionMessenger
              # instance fixed to the bottom-right corner of the screen.
          %code{:executable => ""}
            :preserve
              
              # You can pass an instance of messenger into globalMessenger
              # to override the default position.
              myAwesomeMessenger = $('.mess').messenger()
              Messenger({instance: myAwesomeMessenger});
              
              Messenger() # <-- Will return your messenger
          %code{:executable => ""}
            :preserve
              
              Messenger({'parentLocations': ['.page', 'body']});
              # Will try to insert the messenger into the el matching
              # .page before inserting it into the page.
              
              # This can be important if you're not using fixed positioning.
          %code{:executable => ""}
            :preserve
              
              # All the options for globalMessenger and their defaults:
              
              {
                'parentLocations': ['body'],
                'maxMessages': 9,
                'extraClasses': 'messenger-fixed messenger-on-right messenger-on-bottom messenger-theme-future',
                'instance': undefined,
                'messageDefaults': {
                  # Default message options
                }
              }
          %code{:executable => ""}
            :preserve
              
              # You can also set default options on the Messenger.options object.
              Messenger.options = {'extraClasses': 'messenger-fixed messenger-on-left'}
        %h1 Contributing
        %p We welcome contributors!
        %p
          The build process requires nodejs and
          = succeed "." do
            %a{:href => "http://gruntjs.com/getting-started", :target => "_blank"} grunt-cli
          You can build the output files by running
          = succeed "." do
            %code grunt
          The automated tests can be run by opening SpecRunner.html in a browser.
        %p
          There is plenty to be done, pick an
          %a{:href => "https://github.com/HubSpot/messenger/issues?state=open"} issue
          and start hacking!
    / FOOTER
    #footer_wrap.outer
      %footer.inner
        %p.copyright
          Messenger maintained by
          %a{:href => "https://github.com/HubSpot"} HubSpot
          \-
          %a{:href => "http://dev.hubspot.com/jobs?utm_campaign=os&utm_source=referral"} We're Hiring
        %p
          Published with
          %a{:href => "http://pages.github.com"} GitHub Pages
        %p
          Documentation powered by
          %a{:href => "https://github.com/Hubspot/executr"} Executr
    / Start of Async HubSpot Analytics Code
    :javascript
      (function(d,s,i,r) {
          if (d.getElementById(i)){return;}
          var n=d.createElement(s),e=d.getElementsByTagName(s)[0];
          n.id=i;n.src='//js.hubspot.com/analytics/'+(Math.ceil(new Date()/r)*r)+'/51294.js';
          e.parentNode.insertBefore(n, e);
      })(document,"script","hs-analytics",300000);
        / End of Async HubSpot Analytics Code
    :javascript
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-45159009-1', 'hubspot.com');
      ga('send', 'pageview');

    